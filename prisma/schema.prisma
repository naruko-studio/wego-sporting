// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  role            String?
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  username        String?
  displayUsername String?
  sessions        Session[]
  accounts        Account[]
  passkeys        Passkey[]
  GameEditLog     GameEditLog[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?

  @@map("passkey")
}

model Game {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  country     String
  venue       String
  address     String
  signupStart DateTime
  signupEnd   DateTime
  gameStart   DateTime
  gameEnd     DateTime
  image       String?

  classes     GameClass[]
  GameEditLog GameEditLog[]

  @@map("game")
}

model GameClass {
  gameId    String  @db.Uuid
  className String

  game      Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@id([gameId, className])
  @@map("game_class")
}

model Team {
  id   String @id @db.Uuid
  name String

  @@map("team")
}

// TODO: 關聯Game和Team
/**
 * model signup {
 * @@map("signup")
 * }
 */

model GameEditLog {
  id     String @id @default(uuid()) @db.Uuid
  gameId String @db.Uuid
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  editorId      String
  editorName    String
  field         String
  oldValue      String?
  newValue      String?
  editedAt      DateTime        @default(now())
  User          User?           @relation(fields: [userId], references: [id])
  userId        String?
  GameEditField GameEditField[]

  @@index([gameId])
  @@index([editorId])
  @@map("game_edit_log")
}

model GameEditField {
  id       String      @id @default(uuid()) @db.Uuid
  logId    String      @db.Uuid
  log      GameEditLog @relation(fields: [logId], references: [id], onDelete: Cascade)
  field    String
  oldValue String?
  newValue String?

  @@index([logId])
  @@map("game_edit_field")
}
